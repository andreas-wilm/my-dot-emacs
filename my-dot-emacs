;; .emacs --- Andreas Wilm's Emacs configuration -*- emacs-lisp -*-
;;
;; Andreas Wilm <andreas DOT wilm AT gmail DOT com>
;;
;; ########################################################################
;;
;;
;; Custom keybindings:
;; ==================
;;
;;   comment-region           C-c C-q
;;   increase-font-size       C-x C-+
;;   decrease-font-size       C-x C--
;;
;;
;; Other keybindings
;; =================
;;
;;   undo all unsaved changes       M-x revert-buffer
;;   mark-whole-buffer              C-x h
;;
;;   kill line backward             M-0 C-k
;;   kill sentence forward          M-k
;;   kill sexp forward              C-M-k
;;   word forward-/backward         M-f/-b
;;
;;   isearch-backward-regexp        C-M-r
;;   isearch-forward-regexp         C-M-s
;;   query-replace                  M-r (M-%)
;;   query-replace-regexp           C-M-%
;;   beginning-of-buffer            M-<
;;   find-tag                       M-.
;;   see also complete-tag: find . -type f -iname "*.[ch]" | xargs etags
;;   complete-symbol                M-TAB (Esc-TAB)
;;   upcase-word                    M-u
;;   downcase-word                  M-l
;;
;;   indent the region one space    C-x C-i
;;   see also indent-region         C-M
;;   center-paragraph               M-o M-S
;;   center-line                    M-o M-s
;;
;;   point-to-register              C-x r SPC
;;   jump-to-register               C-x r j
;;
;;   insert result of shell-command
;;   into buffer                    C-u M-!
;;   replace current region with
;;   shell command  output which
;;   gets region passed as input    C-u M-|
;;   see also pipe-through-shell-command
;;
;;   C-u (universal argument) passes an argument to the subsequent
;;   command.  E.g. to indent a region of plain text by 6 spaces, mark
;;   the region, and then type C-u 6 M-C-\.
;;
;;   yank earlier kills:            C-u DIGIT C-y
;;
;;   auctex:
;;     insert environment             C-c C-e
;;     insert-macro                   C-c C-m or C-c RET
;;     run latex                      C-c C-c
;;     run latex on part              C-c C-r
;;     complex tex symbol             M-<TAB>
;;     start viewer                   C-c C-v
;;     run lacheck                    C-c C-c Check
;;     query for name of master file  TeX-master-file-ask
;;     close environment              C-c ]
;;
;;   dabbrev-expand:                C-M-\
;;
;;   macros:
;;     C-x ( - start defining a keyboard macro
;;     C-x ) - stop defining the keyboard macro
;;     C-x e - execute the keyboard macro
;;
;;
;;
;; Useful Commands/Libraries I should use more often
;; =================================================
;;
;;   yasnippet
;;   auto-complete
;;
;;   highlight-changes
;;   goto-last-change
;;   flyspell
;;   compile
;;   ngrep
;;   gdb-many-windows
;;   pop-to-mark-command (instead of using registers)
;;   also C-u C-space or C-u C-@

;;   occur: hide all lines matching regexp
;;          editable version missing (thought that was called all)
;;
;;   delete-matching-lines (alias for flush-lines)
;;   delete-non-matching lines (alias for keep-lines)
;;
;;   regexp:
;;     highlight-regexp
;;     re-builder
;;     align-regexp
;;     complex example which replaces all xyz_infile with pcXyzInfile
;;       replace-regexp  \([a-z]\)\([A-Za-z0-9]+\)_outfile  pc\,(upcase \1)\2Outfile
;;
;;   rectangle:
;;     insert text: mark, then string-rectangle
;;     delete text: mark, then kill-rectangle
;;
;;
;; ########################################################################




;; Startup
;;
;; Enter the debugger each time an error is found
;;
(setq debug-on-error t)
(setq inhibit-startup-message t)
; rarely use the server accept during GUI operation
(if window-system
    (server-start))
(add-to-list 'load-path "~/.emacs.d/")



;; Paths
;;
(setq exec-path (append exec-path '("~/local/bin")))
(setenv "PATH" (concat (getenv "PATH") ":~/local/bin"))



;; PC-like behaviour
;;
;;(pc-selection-mode) ;; includes transient-mark-mode and delete-selection-mode
;; cua-rectangle cursor movements don't work with pc-selection-mode
;; use: \s-return and then C-n -p -f -b or mouse
;; redefines M right/left!
;;
(transient-mark-mode t)
(delete-selection-mode t)
(pc-bindings-mode)



;; Global Key-Bindings
;;
;; suspend Emacs only when running in terminal
;;
(if window-system
  (global-unset-key "\C-z")) ; iconify-or-deiconify-frame (C-x C-z)
;;(global-set-key [(M right)] 'next-buffer) ;; overwritten by pc-select
;;(global-set-key [(M left)] 'previous-buffer) ;; overwritten by pc-select



;; Missing packages list
;;
;; from http://www.mygooglest.com/fni/dot-emacs.html
;; try-require replaces require
;;
(defvar missing-packages-list nil
  "List of packages that `try-require' can't find.")
;; attempt to load a feature/library, failing silently
(message "Defining try-require")
(defun try-require (feature)
  "Attempt to load a library or module. Return true if the
library given as argument is successfully loaded. If not, instead
of an error, just add the package to a list of missing packages."
  (condition-case err
      ;; protected form
      (progn
        (message "Checking for library `%s'..." feature)
        (if (stringp feature)
            (load-library feature)
          (require feature))
        (message "Checking for library `%s'... Found" feature))
    ;; error handler
    (file-error  ; condition
     (progn
       (message "Checking for library `%s'... Missing" feature)
       (add-to-list 'missing-packages-list feature 'append))
     nil)))



;; Font
;;
;; See also http://hivelogic.com/articles/top-10-programming-fonts
;;
(when (>= emacs-major-version 23)
  (if (eq window-system 'x)
      (set-default-font "Inconsolata-11")
    ;; (set-default-font "Monospace-10"))
    ))
;; Changing the font size on the fly
;; http://sachachua.com/wp/2006/09/15/emacs-changing-the-font-size-on-the-fly/
;;
;; See http://emacs-fu.blogspot.com/2008/12/zooming-inout.html for
;; another approach
;;
;; Starting with GnuEmacs 23 you can use C-x C-+ and C-x C-- to
;; increase or decrease the buffer text size
;;
(when (< emacs-major-version 23)
  (message "increase-font-size")
  (defun increase-font-size ()
    (interactive)
    (set-face-attribute 'default
            nil
            :height
            (ceiling (* 1.10
                    (face-attribute 'default :height)))))
  (message "decrease-font-size")
  (defun decrease-font-size ()
    (interactive)
    (set-face-attribute 'default
            nil
            :height
            (floor (* 0.9
                  (face-attribute 'default :height)))))
  (global-set-key (kbd "C-x C-+") 'increase-font-size)
  (global-set-key (kbd "C-x C--") 'decrease-font-size))



;; Highlight
;;
;(setq-default font-lock-function-name-face 'bold)
;;(setq font-lock-comment-face 'italic); ugly
(global-font-lock-mode t) ;; turn on font lock globally
(setq-default font-lock-maximum-decoration t)
(setq-default search-highlight t)
(setq-default query-replace-highlight t)
(if (> emacs-major-version 20)
    (blink-cursor-mode t))



;; Highlight FIXME, BUG etc
;;
;; FIXME: font highlight does not work
;;
(when (try-require 'fixme-mode)
      (fixme-mode))


;; hungry-delete to delete surrounding whitespaces
;; http://www.emacswiki.org/emacs/hungry-delete
;; wget --no-check-certificate -nd https://raw.github.com/nflath/hungry-delete/master/hungry-delete.el
(try-require 'hungry-delete)


;; dos2unix / unix2dos
;;
;; Taken from http://www.jm3.net/code/lisp/dot-emacs
;; convert yucky newlines
;;
(message "Defining dos2unix")
(defun dos2unix ()
  "Convert yucky newlines"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;; Taken from http://www.ludd.ltu.se/~wilper-8/computer/emacs
;;
(message "Defining unix2dos")
(defun unix2dos ()
    (interactive)
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match "\r\n")))



;; ASCII-table
;;
;; Taken from http://puggy.symonds.net/~anoop/configs/dotemacs.html
;; Print the ASCII table.
;;
(message "Defining ascii-table")
(defun ascii-table ()
  "Print the ascii table."
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (insert (format "ASCII characters up to number %d.\n" 254))
  (insert (format "Dec Hex Char\n"))
  (let ((i 0))
    (while (< i 254)
      (setq i (+ i 1))
      (insert (format "%4d %c %x\n" i i i))))
  (beginning-of-buffer))



;; Pipe through shell-command
;;
;; pipe region through shell-command and replace region with result
;;
;; if you just want to run a shell-command on a region with the result
;; begin printed to a temp buffer, use shell-command-on-region
;;
;; original taken from
;; http://www.rus.uni-stuttgart.de/42/themen/texte-bilder/editors/gnuemacs/model-emacs.html
;;
(message "Defining pipe-though-shell-command")
(defun pipe-through-shell-command ()
  "Pipe region through shell-command and replace region with result"
  (interactive)
  ;;(mark-whole-buffer)
  (shell-command-on-region
   ;(point-min) (point-max)
   (mark) (point)
   (read-string "shell-command: ") t))



;; insert-date / insert-iso-date
;;
;; see also yasnippet time
;;
(message "Defining insert-date")
(defun insert-date ()
  "Insert the current date."
  (interactive)
  (insert (format-time-string "%c" (current-time))))
(defun insert-date-time ()
  "Insert the current date and time."
  (interactive)
  (insert (format-time-string "%Y%m%d %H%M" (current-time))))
(defun insert-iso-date ()
  "Display the current date and time."
  (interactive)
  (insert (format-time-string "%Y-%m-%d" (current-time))))



;; auto-load-tags
;;
;; auto load TAGS file if existant
;; Add to your mode hooks
;; build using eg: find . -type f -iname "*.[ch]" | xargs etags
;;
(message "Defining auto-load-tags-file")
(defun auto-load-tags-file ()
  "Automatically loads TAGS file if existant."
  (interactive)
  (let ((tag-file (concat default-directory "TAGS")))
    (if (file-exists-p tag-file)
        (visit-tags-table tag-file)
      (message "No tag-file found"))))



;; color-theme
;;
;; http://www.emacswiki.org/elisp/color-theme.el.gz
;;
;; favourites:
;; color-theme-clarity
;; color-theme-tty-dark
;; color-theme-midnight
;;
(if window-system
    (when (try-require 'color-theme)
      (message "Setting up color-theme")
      ;(color-theme-initialize)
      ;(color-theme-clarity)))
      ))



;; ido
;;
;; http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
;; see also
;; http://emacs-fu.blogspot.com/2009/02/switching-buffers.html
;;
;; NOTES:
;; Open file (C-x C-f):
;;    C-j to create a new file named with the text you entered
;; Recently visited directories:
;;    M-p and M-n for previous/next
;;    M-s to search
;;
(when (try-require 'ido)
      (ido-mode 'both); for buffers and files
      ;;(setq ido-enable-flex-matching); enable fuzzy matching
      (setq ido-max-prospects 8); don't spam my minibuffer
      (setq ido-confirm-unique-completion t); wait for RET, even with unique completion
      ;; confirmation is rather annoying
      (setq confirm-nonexistent-file-or-buffer nil))



;; gnupg support
;;
;; use epa-file or mailcrypt & mc-gpg-file-mode
;;
;; http://www.emacswiki.org/elisp/mc-gpg-file-mode.el
;; http://mailcrypt.sourceforge.net/
;;
(if (try-require 'epa-file)
    (progn
      (epa-file-enable))
 (progn
    (message "Warning: epa-file not found. Will try mailcrypt instead")
    ; FIXME only works with armored files, whereas epa-file does not
    ;  output armored files by default
    ;  Use (epa-armor t) on a per file basis?
    (when (try-require 'mailcrypt)
          (mc-setversion "gpg")
          (setq mc-passwd-timeout 3600)
          (when (try-require 'mc-gpg-file-mode)
              (setq mc-gpg-user-id "andreas.wilm@gmail.com"))
      )))



;; restructured text
;;
(try-require 'rst)


;; edit all lines matching regexp
;;
;; http://groups.google.de/group/comp.emacs/browse_thread/thread/93d284d480e2dfd7/cf4461d655938527?q=occur+read+write&rnum=1&hl=de#cf4461d655938527
;;
(try-require 'all)


;; hide-region
;;
(try-require 'hide-region)


;; paren: parenthesis matching
;;
(when (try-require 'paren)
    (progn
      (show-paren-mode t)
      (setq show-paren-delay 0)))
;;(setq blink-matching-paren-distance nil) ; Blinking parenthesis
;; (setq show-paren-style 'expression) ; Highlight text between parens


;; htmlize
;;
;; http://fly.srk.fer.hr/~hniksic/emacs/htmlize.el
;;
(try-require 'htmlize)


;; goto-last-change
;;
(try-require 'goto-last-change)


;; uniquify
;;
;; show path info in buffers with otherwise identical filenames
;;
(when (try-require 'uniquify)
    (progn
      (setq uniquify-buffer-name-style 'post-forward)))


;; comment
;;
;; old: (autoload 'comment-out-region "comment" nil t)
;;      (global-set-key "\C-c\C-q" 'comment-out-region)
;;
;; part of package newcomment, which is part of emacs
;; make sure it's loaded anyway; experienced some trouble with latex otherwise
;;
(when (try-require 'newcomment)
      (global-set-key "\C-c\C-q" 'comment-region))



;; recentf: recent file menu
;;
;; part of 21, but creates new menu called "files" instead of integrating into files.
;; http://www.djefer.com/info/emacs/recentf.el
;;
(when (try-require 'recentf)
    (progn
      (setq recentf-menu-path '("File"))
      ;; when using trampmode with recentf.el, it's advisable to turn
      ;; off the cleanup feature of recentf
      ;; http://stackoverflow.com/questions/880625/stop-tramp-mode-running-on-emacs-startup
      (setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
      (recentf-mode t)))


;; autoinsert: inserting templates
;;
(when (try-require 'autoinsert)
    (progn
      (auto-insert-mode) ;; Adds hook to find-files-hook
      (setq auto-insert-directory "~/local/src/emacs-templ/") ;; trailing slash important
      (setq auto-insert-query t) ;; prompt before insertion
      (define-auto-insert "\\.c\\'" "c-template.c")
      (define-auto-insert "\\.py\\'" "python-template.py")
      (add-hook 'find-file-hooks 'auto-insert)))



;; tex-site
;;
(when (try-require 'tex-site)
    (progn
    (setq TeX-quote-after-quote t)
    (local-set-key "\C-c\C-q" 'TeX-comment-or-uncomment-region);; comment-region makes trouble
    ;;(TeX-run-style-hooks "german")
    ))



;; Tramp
;;
;; In theory unncessary because of ssh access (e.g. sshfs).
;; but needed for pylint
;;
;; C-x C-f /remotehost:dir/file
;; Using su to edit stuff as root
;; C-x C-f /su::dir/file
;; part of emacs > 21.4
;;
;;(if (> emacs-major-version 20)
;;    (if (require 'tramp nil t)
;;        (progn
;;          (message "Setting up tramp")
;;          (setq tramp-default-method "scp")
;;          (add-to-list 'tramp-default-method-alist
;;                       '("\\localhost\\'" "\\root\\'" "sudo"))))
;;  (message "WARNING: tramp not available")
;;  (message "Not loading of tramp (emacs-version<21)"))
(if (> emacs-major-version 20)
    (try-require 'tramp))



;; yasnippet
;;
(add-to-list 'load-path "~/.emacs.d/yasnippet/")
(when (try-require 'yasnippet) ;; not yasnippet-bundle
    (progn
      (yas/initialize)
      (yas/load-directory "~/.emacs.d/yasnippet/snippets")
      ;(setq yas/trigger-key (kbd "C-c <kp-multiply>"))
      ;;hippie expand with yas
      (add-to-list 'hippie-expand-try-functions-list 'yas/hippie-try-expand)
      ))


;; python
;;
;; See also
;; http://www.emacswiki.org/emacs/?action=browse;oldid=PythonMode;id=PythonProgrammingInEmacs
;;
;; From http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/:
;; "There are two python modes; python.el and python-mode.el. Although
;; python.el comes with GNU Emacs 22, I recommend you use
;; python-mode.el since it has support for ipython"
;; Download from https://launchpad.net/python-mode

;; Get (void-function declare-function) on MacOS Emacs when loading
;; python-mode. Apparently declare-function was added 2007-11-17 to
;; Emacs CVS sources Use the following workaround to avoid error:
;; Taken from https://gist.github.com/1127403
(or (fboundp 'declare-function)
    ;; taken from Emacs 22.2, not present in 22.1:
    (defmacro declare-function (&rest args)
      "In Emacs 22, does nothing.  In 23, it will suppress byte-compiler warnings.
      This definition is so that packages may take advantage of the
      Emacs 23 feature and still remain compatible with Emacs 22."
      nil))

(add-to-list 'load-path "~/.emacs.d/python-mode/")
(setq py-install-directory "~/.emacs.d/python-mode/")
(when (try-require 'python-mode)
  (progn
    (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
    (try-require 'python-pylint)
    
    ; avoid error: (void-variable py-mode-map)
    ; https://bugs.launchpad.net/python-mode/+bug/912919
    ;(defvar py-mode-map python-mode-map)
    (setq py-mode-map python-mode-map)
    ; Download from https://gist.github.com/302848
    (try-require 'ipython)
))



;; C
;;
(add-hook 'c-mode-common-hook
          (lambda ()
            (message "Setting up my C hooks")
            (setq c-default-style "linux")
            ; linux and python should be similar according to
            ; http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS
            ; choices: gnu k&r bsd stroustrup linux python java

            (auto-load-tags-file)

            ;;(setq c-basic-offset 4)
            ;;(setq tab-width 4)
            ;;(auto-fill-mode t)
            ;(setq c-default-style "python") ; gnu k&r bsd stroustrup linux
            ;;(local-set-key [return] 'newline-and-indent)
            ;;(hs-minor-mode t)
            ;;(local-set-key "\C-c\C-q" 'comment-region) ;; c indent-region
            ;(auto-complete-mode t)
            ))



;; LaTeX & TeX
;;
(add-hook 'latex-mode-hook
          (lambda ()
            (message "Setting up my LaTeX hooks")
            ;;(setq tab-width 4)
            (auto-fill-mode t)
            (local-set-key [return] 'newline-and-indent)
            ;;(local-set-key "\C-c\C-q" 'TeX-comment-or-uncomment-region)
            (setq TeX-auto-save t)
            (setq TeX-parse-self t)
            (setq-default TeX-master nil)
            (setq TeX-auto-untabify t)
            ;(auto-complete-mode t)
            ;; http://staff.science.uva.nl/~dominik/Tools/reftex/reftex.html
            (when (try-require 'reftex)
              (reftex-mode t)
              (setq reftex-plug-into-AUCTeX t)
              (setq reftex-use-external-file-finders t))
            (flyspell-mode t)
            (local-set-key "\C-c\C-q" 'comment-region)
            ;;(TeX-run-style-hooks "german")
            ))
(add-hook 'TeX-language-ngerman-hook
          (lambda () (ispell-change-dictionary "german")))
(add-hook 'TeX-language-german-hook
          (lambda () (ispell-change-dictionary "ngerman")))
(add-hook 'tex-mode-hook
          (lambda ()
            (message "just a test: tex-mode-hook..only called when auctex is missing?")
            ))
(add-hook 'latex-mode-hook
          (lambda ()
            (message "just a test: emacs latex-mode-hook..only called when auctex is missing?")
            ))



;; BibTeX
;;
(add-hook 'bibtex-mode-hook
          (lambda ()
            (message "Setting up my bibtex hooks")
            (auto-fill-mode nil)
            (local-set-key [return] 'newline-and-indent)
            ;; tab normally set to bibtex-find-text. don't use this,
            ;; but need tab for yasnippet
            ;; FIXME: doesnt work
            (local-set-key [tab] 'yas/expand)
            ))



;; Shell
;;
(setq shell-file-name "/bin/bash") ; Set Shell for M-| command
(add-hook 'sh-mode-hook
          (lambda ()
            (message "Setting up my sh hooks")
            ;;(setq tab-width 4)
            (local-set-key [return] 'newline-and-indent)
            ;;(auto-fill-mode t)
            ;;(auto-load-tags-file)
            ))


;; Html
;;
;; xml-lite: http://www.dogbiscuit.org/mdub/software/xml-lite.el
;; FIXME: isn't nxml much nicer
;;
(add-hook 'html-mode-hook
          (lambda ()
            (message "Setting up my html hooks")
            (if (try-require 'xml-lite nil t)
                (progn
                  (xml-lite-mode t)
                  (setq xml-lite-indent-offset 2))
              (message "Not activating xml-lite-mode (emacs-version<21)"))

            ;; FIXME why is text mode activated again at this point?
            (local-set-key [tab] 'indent-for-tab-command)
            ;;(setq tab-width 2)
            (local-set-key [return] 'newline-and-indent)
            (setq show-trailing-whitespace t)
            (flyspell-mode t)
            ))

(add-to-list 'auto-mode-alist '("\\.wml$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.xhtml$" . html-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))




;; Text
;;
(add-hook 'text-mode-hook
          (lambda ()
            (message "Setting up my text hooks")
            (setq tab-width 4)
            (auto-fill-mode t)
            (setq show-trailing-whitespace t)
            (flyspell-mode t)
            ))


;; Perl
;;
(add-hook 'perl-mode-hook
          (lambda ()
            (message "Setting up my perl hooks")
            ;;(setq tab-width 4)
            ;;(auto-fill-mode t)
            (local-set-key [return] 'newline-and-indent)
            ;;(auto-load-tags-file)
            ;(hs-minor-mode t)
            ))



; =================================================================




;; ------------------------------------------------------------------------
;; ###   Skeleton   #######################################################
;; ###
;; ###  FIXME convert these to yasnippet snippets
;;
;;
(defvar skeleton-enabled t)
(when skeleton-enabled

  ;; ---   skel-tcl-proc
  ;;
  ;; insert a tcl proc template
  ;;
  (define-skeleton skel-tcl-proc
    "Insert a tcl proc template"
    ""
    \n >
    "# ---   " (setq v1 (skeleton-read "proc name? "))
    \n >
    "#"
    \n >
    "# <FIXME:shortdescription>"
    \n >
    "#"
    \n >
    "# IN:"
    \n >
    "# OUT:"
    \n >
    "# SIDEEFFECTS:"
    \n >
    "# NOTES:"
    \n >
    "#"
    \n >
    "proc " v1 " {} {"
    \n >
    "################"
    \n >
    _
    \n >
    "}"
    \n >
    "# " v1
    \n
    )


  ;; ---   skel-tcl-readfile
  ;;
  ;; insert a tcl readfile template
  ;;
  (define-skeleton skel-tcl-readfile
    "Insert a tcl proc template"
    ""
    \n >
    "set fid [open $faddress r]"
    \n >
    "while {[gets $fid line]!=-1} {"
    \n >
    "if {![regexp {^ *\#} $line]} {"
    \n >
    "puts \"no comment in $line\""
    \n >
    "}"
    \n >
    "}"
    \n >
    "close $fid"
    \n
    )


  ;; ---   skel-bash-func
  ;;
  ;; insert a bash function template
  ;;
  (define-skeleton skel-bash-func
    "Insert a bash function template"
    ""
    \n >
    "###   " (setq v1 (skeleton-read "proc name? "))
    \n >
    "#"
    \n >
    "# FIXME:description"
    \n >
    "#"
    \n >
    v1 "()"
    \n >
    "{"
    \n >
    "if [ -z \"$1\" ]; then"
    \n >
    "FIXME:DOSOMETHING"
    \n >
    "fi"
    \n >
    "}"
    \n >
    "# " v1
    \n
    )


  ;; ---   skel-c-func
  ;;
  ;; insert a c function template
  ;;
  (define-skeleton skel-c-func
    "Insert a c function template"
    ""
    \n >
    "/***   " (setq v1 (skeleton-read "proc name? ")) "   ***"
    \n >
    "*"
    \n >
    "* FIXME:description"
    \n >
    "*"
    \n >
    "* ARGUMENTS:"
    \n >
    "* RETURN:"
    \n >
    "* SIDEEFFECTS:"
    \n >
    "* NOTES:"
    \n >
    "*/"
    \n >
    "void"
    \n >
    v1 "()"
    \n >
    "{"
    \n >
    "}"
    \n >
    "/***   end: " v1 "   ***/"
    \n
    )



  ;; ---   skel-bibtex-entry
  ;;
  ;; insert a bibtex entry template
  ;;
  (define-skeleton skel-bibtex-entry
    "Insert a bibtex entry template"
    ""
    \n >
    "@ARTICLE{,"
    \n >
    "author   = \"\","
    \n >
    "title    = {{}},"
    \n >
    "journal  = {},"
    \n >
    "year     = {},"
    \n >
    "volume   = {\\PrintVol{}},"
    \n >
    "number   = {},"
    \n >
    "pages    = {},"
    \n >
    "abstract = {},"
    \n >
    "URL      = {},"
    \n >
    "eprint   = {}"
    \n >
    "}"
    \n
    )


  ;; ---   skel-bibtex-entry
  ;;
  ;; insert a bibtex entry template
  ;;
  (define-skeleton skel-beamer-frame
    "Insert a latex-beamer frame template"
    ""
    \n >
    "\\begin{frame}"
    \n >
    "\\frametitle{FIXME:title}"
    \n >
    "\\end{frame}"
    \n >
    "%"
    \n >
    "\\mynote{%"
    \n >
    "\\begin{minipage}{0.5\\textwidth}"
    \n >
    "\\tiny"
    \n >
    "% \\begin{itemize}"
    \n >
    "%\\setlength{\\itemsep}{1pt}"
    \n >
    "% \\item"
    \n >
    "% \\end{itemize}"
    \n >
    "\\end{minipage}\\hfill%"
    \n >
    "\\begin{minipage}{0.5\\textwidth}"
    \n >
    "\\tiny"
    \n >
    "% \\begin{itemize}"
    \n >
    "%\\setlength{\\itemsep}{1pt}"
    \n >
    "% \\item"
    \n >
    "% \\end{itemize}"
    \n >
    "\\textit{Transition:}"
    \n >
    "\\end{minipage}"
    \n >
    "}"
    \n
    )
)




;; ######################################################################
;; Misc
;; ----


;; Occur and Isearch
;;
;; Found on
;; http://emacsblog.org/2007/02/27/quick-tip-add-occur-to-isearch/
;;
;;  adds an extra keybinding to interactive search (C-s) that runs
;;  occur on the current search string/regexp, immediately showing all
;;  hits in the entire buffer. Example: C-s foo C-o
;;
(define-key isearch-mode-map (kbd "C-o")
  (lambda ()
    (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string
               (regexp-quote isearch-string))))))


;; Bell
;;
;; get a visual signal instead of beeping
(setq visible-bell t)
;; reduce the amount of warning signals
;; http://www.emacswiki.org/cgi-bin/wiki/AlarmBell
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort abort-recursive-edit exit-minibuffer
                                      keyboard-quit))
          (ding))))


;; Smooth Scrolling
;;
;; http://www.emacswiki.org/cgi-bin/wiki/SmoothScrolling
(setq scroll-step 1
        scroll-conservatively 10000)
;;(add-hook 'post-command-hook
;;   (lambda ()
;;     (recenter '("don't redraw"))))



;;(load "iso-insert") ;; not needed?
;; for working umlauts on console
(set-input-mode (car (current-input-mode))
                (nth 1 (current-input-mode))
                0)

;; Time
;;
(setq-default display-time-24hr-format t)
(setq-default display-time-day-and-date t)
(display-time)


;; Calendar
;;
;; Latitude/Longitude and Timezone: Düsseldorf, 51.2264/6.77679, +1
;; Latitude/Longitude and Timezone: Dublin, 53.333/-6.25, 0
;;
(setq calendar-latitude 1.3667)
(setq calendar-longitude 103.8)
(setq calendar-location-name "Singapore")
(setq calendar-week-start-day 1) ; Week starts monday
(setq european-calendar-style 't) ; European style calendar


;; read updated TAGS file silently
(setq tags-revert-without-query 1)

;; Printing
;;
;;(setq lpr-command "lpr")
;;(setq  ps-lpr-command "lpr")
;;(setq lpr-switches '("-P hp5000d "))
(setq ps-paper-type 'a4) ; Specify printing format


;;  Numbering
;;
(line-number-mode t)
(column-number-mode t)

;; If typed command has a key binding, mention this
(setq-default suggest-key-bindings t);

;; Compression
(auto-compression-mode t)

;; Tabs
(setq-default indent-tabs-mode nil)    ; TAB uses spaces not TAB characters
(setq-default tab-width 4)


;; Menu bars
;;
(if window-system
    (progn
      (set-scroll-bar-mode 'right)
      (tool-bar-mode -1)))
(which-function-mode t)


; exlicitely turn on mouse-wheel-mode if in GUI mode 
(if window-system
    (mouse-wheel-mode t))
;; (if (load "mwheel" t)
;;    (mwheel-install))

;;(setq inhibit-default-init t)
(setq-default truncate-lines t)
(defalias 'yes-or-no-p 'y-or-n-p);; http://www.emacswiki.org/cgi-bin/emacs-en/QuickYes
;; or (fset 'yes-or-no-p 'y-or-n-p)
;; Enter the debugger each time an error is found
(setq debug-on-error t)
;; Include current buffer name in the title bar
;; (setq frame-title-format "%b - emacs")
;; Or set the title bar to show file name if available, buffer name otherwise
(setq frame-title-format '(buffer-file-name "%f" ("%b")))
;; make sure your text files end in a newline
(setq require-final-newline 't)
;; Or let Emacs ask about any time it is needed
;; (setq require-final-newline 'query)


;Make cut/copy/paste set/use the X CLIPBOARD in preference to the X
;PRIMARY. Unbreaks cut and paste between Emacs and well-behaved
;applications like Mozilla, KDE, and GNOME, but breaks cut and paste
;between Emacs and old applications like terminals.
(setq x-select-enable-clipboard t)


(setq user-mail-address "andreas.wilm@gmail.com")

(setq sentence-end-double-space nil) ; Sentences end with one space
(icomplete-mode t) ; Completion in mini-buffer


(setq default-major-mode 'text-mode) ; Text-mode is default mode


;; Mac specifics
;;
;; Inspired from http://xahlee.org/emacs/xah_emacs_mac.el
;;
;; OS X Window System
(if (string-equal system-type "darwin")
  (progn
    (message "Customising for Darwin")
    ; delete char on external keyboard (kp) is bound to
    ; backward-delete-char-untabify instead of delete-char on Mac Os X.
    (global-set-key [kp-delete] 'delete-char)
    ; Needed on MacOS x for mc-gpg to find gpg
    ; FIXME Why is this not set by environment?
    ; delete next line and you get: *ERROR*: gpg could not be found
    (setenv "PATH" (concat (getenv "PATH") ":/opt/local/bin"))
    ; delete next line and you get: *ERROR*: Searching for program: No such file or directory, gpg
    (setq exec-path (append exec-path '("/opt/local/bin")))
    (if (eq window-system 'ns); Not 'mac!
        (progn
          (message "Customising for OS X window-system")
          ;;(setq mac-command-modifier 'meta)
          ;;(setq mac-option-modifier 'hyper)
          ;; the following replaces the two lines above
          ;; see also http://lojic.com/blog/2010/03/17/switching-from-carbonemacs-to-emacs-app/
          (setq ns-command-modifier 'meta)))))


;; auto-complete
;;
;; http://cx4a.org/software/auto-complete/index.html
;; C-s to filter
;;
;;(add-to-list 'load-path "~/.emacs.d/auto-complete")
;;(when (try-require 'auto-complete-config)
;;  (add-to-list 'ac-dictionary-directories "~/.emacs.d/autocomplete/ac-dict")
;;  (if (> emacs-major-version 22)
;;      (ac-config-default))
;;      ;; if flyspeed stop working try: ac-flyspell-workaround
;;  )
;;
;; Get (wrong-number-of-arguments called-interactively-p 1)
;; on MacOS Emacs. Use the following workaround from
;; http://paste.lisp.org/display/115598
;; If we have a version of called-interactively-p that doesn't accept
;; arguments, redefine it so that it does take arguments. This
;; retains compatibility with packages that pass arguments to
;; called-interactively-p.
(condition-case nil (called-interactively-p 'interactive)
  (error
   ; Save reference to called-interactively-p in
   ; inglorion-system-called-interactively-p
   (fset 'inglorion-system-called-interactively-p
         (symbol-function 'called-interactively-p))
   ; Define called-interactively-p so that it discards
   ; its arguments and calls inglorion-system-called-interactively-p
   (fset 'called-interactively-p
         (lambda (&rest args)
           (inglorion-system-called-interactively-p)))))

(add-to-list 'load-path "~/.emacs.d/auto-complete")
(when (try-require 'auto-complete-config)
      (global-auto-complete-mode t)
      (add-to-list 'ac-dictionary-directories "~/.emacs.d/autocomplete/ac-dict")
      (ac-config-default)
)



;; CUA
;;
;; http://www.cua.dk/cua.el
;;
;; Theoretically allows you to use `C-v', `C-c', and `C-x' to paste,
;; copy, and cut the region. But most importantly has supercool
;; rectangle support
;;
;; best activated after all custom key-bindings
;;
;; part of emacs since 22.1.1
(if (> emacs-major-version 21)
    (progn
      (cua-mode t)
      (setq cua-enable-cua-keys nil)
      ;;(transient-mark-mode 1) ;; No region when it is not highlighted
      (global-unset-key "\C-v"); normally bound to cua-scroll-up
      )
      ;; try external lib (try-require 'cua)
  )







;; OLD STUFF
;; ------------------------------------------------------------------------


;; ---  HideShow
;;
;(when (try-require 'hideshow)
;      setq hs-isearch-open 't)
;; activate with hs-minor-mode
;; M-x hs-...
;; C-c @ C-c toggle hide/show
;; C-c @ C-s show block
;; C-c @ C-h hide block
;; C-c @ ESC C-s show all
;; C-c @ ESC C-h hide all


;; http://www.emacswiki.org/cgi-bin/wiki/LanguageEnvironment
;; use native language env
;;
;;(set-terminal-coding-system 'iso-latin-1)
;;(set-language-environment "Latin-1")
;;(set-language-environment 'UTF-8)


;; semi-obsolete: (standard-display-european 1)


;; bar-cursor
;;
;;(if (require 'bar-cursor nil t)
;;    (progn
;;      (message "Setting up bar-cursor")
;;      (bar-cursor-mode t))
;;  (message "WARNING: bar-cursor not available"))



;; ansi-term
;;
;; http://user.it.uu.se/~mic/shell-toggle.el
;; and modified by me
;;
;(autoload 'ansi-term-toggle
;  "ansi-term-toggle"
;  "Toggles between the *ansishell* buffer and whatever buffer you are editing."
;  t)
;(autoload 'ansi-term-toggle-cd
;  "ansi-term-toggle-cd"
;  "Pops up a shell-buffer and insert a \"cd <file-dir>\" command."
;  t)
;;
;(when (try-require 'multi-term)
;    (progn
;      (setq multi-term-program "/bin/bash")))



;; ---   insert-shell-cmd
;;
;; NOTE same as C-u M-!
;;
;; call shell-command and insert output
;;
;(message "Defining insert-shell-cmd")
;(defun my-insert-shell-cmd()
;  "Insert output of shell-command"
;  (interactive)
;  (shell-command (read-string "shell-command: ") t))


; Scratch
;
; enable auto-save for scratch
;(with-current-buffer (get-buffer "*scratch*")
;      (auto-save-mode t))



